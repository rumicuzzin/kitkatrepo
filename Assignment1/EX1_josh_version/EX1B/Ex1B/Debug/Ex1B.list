
Ex1B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000014c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e0  080002e0  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e0  080002e0  00002008  2**0
                  CONTENTS
  4 .ARM          00000000  080002e0  080002e0  00002008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e0  080002e0  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e0  080002e0  000012e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002e4  080002e4  000012e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  080002e8  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002008  2**0
                  CONTENTS
 10 .bss          0000001c  20000008  20000008  00002008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 13 .debug_line   000000e0  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000087  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000054  00000000  00000000  0000219f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000021f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000000a3  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  0000231b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00002334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002c8 	.word	0x080002c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	080002c8 	.word	0x080002c8

080001d4 <main>:
palindrome_string: .asciz "racecar" @Define null terminated string

.text

main:
	LDR R1, = palindrome_string		@Load address of string
 80001d4:	4914      	ldr	r1, [pc, #80]	@ (8000228 <palindrome_true+0x8>)
	MOV R2, #0						@End index value
 80001d6:	f04f 0200 	mov.w	r2, #0
	MOV R3, #0						@Start index value
 80001da:	f04f 0300 	mov.w	r3, #0

080001de <check_palindrome_loop>:

	check_palindrome_loop:

		BL find_end					@Function call to find length of
 80001de:	f000 f803 	bl	80001e8 <find_end>

		BL check_palindrome			@Function call to check if palindrome
 80001e2:	f000 f80c 	bl	80001fe <check_palindrome>

		BX LR						@Exit
 80001e6:	4770      	bx	lr

080001e8 <find_end>:

find_end:
	LDRB R4, [R1, R2]				@Load char from string
 80001e8:	5c8c      	ldrb	r4, [r1, r2]
    CMP R4, #0						@Check for null character
 80001ea:	2c00      	cmp	r4, #0
    BEQ found_end           		@If null, end of string found
 80001ec:	f000 8004 	beq.w	80001f8 <found_end>
    ADD R2, #1           			@Else continue to parse through string
 80001f0:	f102 0201 	add.w	r2, r2, #1
    B find_end
 80001f4:	f7ff bff8 	b.w	80001e8 <find_end>

080001f8 <found_end>:

found_end:
    SUB R2, #1						@Length of string is n - 1 due to null character
 80001f8:	f1a2 0201 	sub.w	r2, r2, #1
	BX LR							@Return to main function call
 80001fc:	4770      	bx	lr

080001fe <check_palindrome>:

check_palindrome:
    CMP R2, R3               		@Check for when end is less than or equal to start
 80001fe:	429a      	cmp	r2, r3
    BLE palindrome_true      		@If it is, palindrome confirmed
 8000200:	f340 800e 	ble.w	8000220 <palindrome_true>

    LDRB R5, [R1, R3]        		@Load starting char
 8000204:	5ccd      	ldrb	r5, [r1, r3]
    LDRB R6, [R1, R2]        		@Load end char
 8000206:	5c8e      	ldrb	r6, [r1, r2]
    CMP R5, R6               		@Compare for equivalence
 8000208:	42b5      	cmp	r5, r6
    BNE palindrome_false    		@If not equal, not plaindrome
 800020a:	f040 8006 	bne.w	800021a <palindrome_false>

    ADD R3, #1           			@Start + 1
 800020e:	f103 0301 	add.w	r3, r3, #1
    SUB R2, #1           			@End - 1
 8000212:	f1a2 0201 	sub.w	r2, r2, #1
    B check_palindrome      		@Loop again
 8000216:	f7ff bff2 	b.w	80001fe <check_palindrome>

0800021a <palindrome_false>:

palindrome_false:
    MOV R0, #0               		@Set R0 as result register
 800021a:	f04f 0000 	mov.w	r0, #0
    BX LR                   		@R0 = 0, not palindrome
 800021e:	4770      	bx	lr

08000220 <palindrome_true>:

palindrome_true:
    MOV R0, #1               		@R0 = 1, is palindrome
 8000220:	f04f 0001 	mov.w	r0, #1
    BX LR
 8000224:	4770      	bx	lr
 8000226:	0000      	.short	0x0000
	LDR R1, = palindrome_string		@Load address of string
 8000228:	20000000 	.word	0x20000000

0800022c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800022c:	480d      	ldr	r0, [pc, #52]	@ (8000264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800022e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000230:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000234:	480c      	ldr	r0, [pc, #48]	@ (8000268 <LoopForever+0x6>)
  ldr r1, =_edata
 8000236:	490d      	ldr	r1, [pc, #52]	@ (800026c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000238:	4a0d      	ldr	r2, [pc, #52]	@ (8000270 <LoopForever+0xe>)
  movs r3, #0
 800023a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800023c:	e002      	b.n	8000244 <LoopCopyDataInit>

0800023e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000242:	3304      	adds	r3, #4

08000244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000248:	d3f9      	bcc.n	800023e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024a:	4a0a      	ldr	r2, [pc, #40]	@ (8000274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800024c:	4c0a      	ldr	r4, [pc, #40]	@ (8000278 <LoopForever+0x16>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000250:	e001      	b.n	8000256 <LoopFillZerobss>

08000252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000254:	3204      	adds	r2, #4

08000256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000258:	d3fb      	bcc.n	8000252 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025a:	f000 f811 	bl	8000280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800025e:	f7ff ffb9 	bl	80001d4 <main>

08000262 <LoopForever>:

LoopForever:
  b LoopForever
 8000262:	e7fe      	b.n	8000262 <LoopForever>
  ldr   r0, =_estack
 8000264:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800026c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000270:	080002e8 	.word	0x080002e8
  ldr r2, =_sbss
 8000274:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000278:	20000024 	.word	0x20000024

0800027c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800027c:	e7fe      	b.n	800027c <ADC1_2_IRQHandler>
	...

08000280 <__libc_init_array>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	4d0d      	ldr	r5, [pc, #52]	@ (80002b8 <__libc_init_array+0x38>)
 8000284:	4c0d      	ldr	r4, [pc, #52]	@ (80002bc <__libc_init_array+0x3c>)
 8000286:	1b64      	subs	r4, r4, r5
 8000288:	10a4      	asrs	r4, r4, #2
 800028a:	2600      	movs	r6, #0
 800028c:	42a6      	cmp	r6, r4
 800028e:	d109      	bne.n	80002a4 <__libc_init_array+0x24>
 8000290:	4d0b      	ldr	r5, [pc, #44]	@ (80002c0 <__libc_init_array+0x40>)
 8000292:	4c0c      	ldr	r4, [pc, #48]	@ (80002c4 <__libc_init_array+0x44>)
 8000294:	f000 f818 	bl	80002c8 <_init>
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	10a4      	asrs	r4, r4, #2
 800029c:	2600      	movs	r6, #0
 800029e:	42a6      	cmp	r6, r4
 80002a0:	d105      	bne.n	80002ae <__libc_init_array+0x2e>
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a8:	4798      	blx	r3
 80002aa:	3601      	adds	r6, #1
 80002ac:	e7ee      	b.n	800028c <__libc_init_array+0xc>
 80002ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b2:	4798      	blx	r3
 80002b4:	3601      	adds	r6, #1
 80002b6:	e7f2      	b.n	800029e <__libc_init_array+0x1e>
 80002b8:	080002e0 	.word	0x080002e0
 80002bc:	080002e0 	.word	0x080002e0
 80002c0:	080002e0 	.word	0x080002e0
 80002c4:	080002e4 	.word	0x080002e4

080002c8 <_init>:
 80002c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ca:	bf00      	nop
 80002cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ce:	bc08      	pop	{r3}
 80002d0:	469e      	mov	lr, r3
 80002d2:	4770      	bx	lr

080002d4 <_fini>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	bf00      	nop
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr


Ex1A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000154  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e8  080002e8  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e8  080002e8  00002008  2**0
                  CONTENTS
  4 .ARM          00000000  080002e8  080002e8  00002008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e8  080002e8  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e8  080002e8  000012e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002ec  080002ec  000012ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  080002f0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002008  2**0
                  CONTENTS
 10 .bss          0000001c  20000008  20000008  00002008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 13 .debug_line   000000e4  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000087  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000054  00000000  00000000  000021a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000021f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000000a3  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  0000231b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00002334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002d0 	.word	0x080002d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	080002d0 	.word	0x080002d0

080001d4 <main>:
.equ state, 0x1 				@Define constant state to take values 1 or 0
								@0 for lower to upper 1 for upper to lower
.text

main:
	LDR R1, = Ascii_string 		@Load address of string
 80001d4:	4916      	ldr	r1, [pc, #88]	@ (8000230 <done+0x2>)
	LDR R2, = state				@Load state value
 80001d6:	f04f 0201 	mov.w	r2, #1
	MOV R4, #0					@Load 0 as starting increment value (int i = 0)
 80001da:	f04f 0400 	mov.w	r4, #0

080001de <string_loop>:


	@For loop to go through string
	string_loop:
		LDRB R3, [R1, R4]		@Load first ascii character
 80001de:	5d0b      	ldrb	r3, [r1, r4]
		CMP R3, #0				@Check for null terminator
 80001e0:	2b00      	cmp	r3, #0
		BEQ done				@Exit if null
 80001e2:	f000 8024 	beq.w	800022e <done>

		CMP R3, #0x41			@Check for letters, less than 0x41 not relevant
 80001e6:	2b41      	cmp	r3, #65	@ 0x41
		BLT next_character		@Loop to next character
 80001e8:	f2c0 800a 	blt.w	8000200 <next_character>

		CMP R3, #0x5A			@Check if uppercase, 0x41 < R3 < 0x5A
 80001ec:	2b5a      	cmp	r3, #90	@ 0x5a
		BLE check_state_lower	@Check state value
 80001ee:	f340 800a 	ble.w	8000206 <check_state_lower>

		CMP R3, #0x61			@Check for letters, 0x5A < R3 <0x60 not relevant
 80001f2:	2b61      	cmp	r3, #97	@ 0x61
    	BLT next_character		@Loop to next character
 80001f4:	f2c0 8004 	blt.w	8000200 <next_character>

   		CMP R3, #0x7A			@Check if lowercase, #0x61 < R3 < #0x7A
 80001f8:	2b7a      	cmp	r3, #122	@ 0x7a
    	BLE check_state_upper 	@Check state value
 80001fa:	f340 8009 	ble.w	8000210 <check_state_upper>

    	BX LR
 80001fe:	4770      	bx	lr

08000200 <next_character>:

next_character:
    ADD R4, #0x1				@Increment by 1
 8000200:	f104 0401 	add.w	r4, r4, #1
    B string_loop				@Loop back to string loop
 8000204:	e7eb      	b.n	80001de <string_loop>

08000206 <check_state_lower>:

@Functions to check state value
check_state_lower:
	CMP R2, #0					@Check state value
 8000206:	2a00      	cmp	r2, #0
	BEQ convert_to_lowercase	@state == 0, convert lowercase
 8000208:	f000 8007 	beq.w	800021a <convert_to_lowercase>
	B next_character			@Otherwise go to next char
 800020c:	f7ff bff8 	b.w	8000200 <next_character>

08000210 <check_state_upper>:

check_state_upper:
	CMP R2, #1					@Check state value
 8000210:	2a01      	cmp	r2, #1
	BEQ convert_to_uppercase	@state == 1, convert uppercase
 8000212:	f000 8007 	beq.w	8000224 <convert_to_uppercase>
	B next_character			@Otherwise go to next char
 8000216:	f7ff bff3 	b.w	8000200 <next_character>

0800021a <convert_to_lowercase>:

@Character conversion functions
convert_to_lowercase:
	ADD R3, #0x20           	@Convert upper to lower
 800021a:	f103 0320 	add.w	r3, r3, #32
    STRB R3, [R1, R4]           @Store new char
 800021e:	550b      	strb	r3, [r1, r4]
    B next_character			@Loop to next character
 8000220:	f7ff bfee 	b.w	8000200 <next_character>

08000224 <convert_to_uppercase>:

convert_to_uppercase:
	SUB R3, #0x20				@Convert lower to upper
 8000224:	f1a3 0320 	sub.w	r3, r3, #32
	STRB R3, [R1, R4]			@Store new char
 8000228:	550b      	strb	r3, [r1, r4]
    B next_character			@Loop to next character
 800022a:	f7ff bfe9 	b.w	8000200 <next_character>

0800022e <done>:

done:
	BX LR						@Return - quit program
 800022e:	4770      	bx	lr
	LDR R1, = Ascii_string 		@Load address of string
 8000230:	20000000 	.word	0x20000000

08000234 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000234:	480d      	ldr	r0, [pc, #52]	@ (800026c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000236:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000238:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800023c:	480c      	ldr	r0, [pc, #48]	@ (8000270 <LoopForever+0x6>)
  ldr r1, =_edata
 800023e:	490d      	ldr	r1, [pc, #52]	@ (8000274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000240:	4a0d      	ldr	r2, [pc, #52]	@ (8000278 <LoopForever+0xe>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000244:	e002      	b.n	800024c <LoopCopyDataInit>

08000246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024a:	3304      	adds	r3, #4

0800024c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800024c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000250:	d3f9      	bcc.n	8000246 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000252:	4a0a      	ldr	r2, [pc, #40]	@ (800027c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000254:	4c0a      	ldr	r4, [pc, #40]	@ (8000280 <LoopForever+0x16>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000258:	e001      	b.n	800025e <LoopFillZerobss>

0800025a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800025c:	3204      	adds	r2, #4

0800025e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000260:	d3fb      	bcc.n	800025a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000262:	f000 f811 	bl	8000288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000266:	f7ff ffb5 	bl	80001d4 <main>

0800026a <LoopForever>:

LoopForever:
  b LoopForever
 800026a:	e7fe      	b.n	800026a <LoopForever>
  ldr   r0, =_estack
 800026c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000274:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000278:	080002f0 	.word	0x080002f0
  ldr r2, =_sbss
 800027c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000280:	20000024 	.word	0x20000024

08000284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000284:	e7fe      	b.n	8000284 <ADC1_2_IRQHandler>
	...

08000288 <__libc_init_array>:
 8000288:	b570      	push	{r4, r5, r6, lr}
 800028a:	4d0d      	ldr	r5, [pc, #52]	@ (80002c0 <__libc_init_array+0x38>)
 800028c:	4c0d      	ldr	r4, [pc, #52]	@ (80002c4 <__libc_init_array+0x3c>)
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	10a4      	asrs	r4, r4, #2
 8000292:	2600      	movs	r6, #0
 8000294:	42a6      	cmp	r6, r4
 8000296:	d109      	bne.n	80002ac <__libc_init_array+0x24>
 8000298:	4d0b      	ldr	r5, [pc, #44]	@ (80002c8 <__libc_init_array+0x40>)
 800029a:	4c0c      	ldr	r4, [pc, #48]	@ (80002cc <__libc_init_array+0x44>)
 800029c:	f000 f818 	bl	80002d0 <_init>
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	10a4      	asrs	r4, r4, #2
 80002a4:	2600      	movs	r6, #0
 80002a6:	42a6      	cmp	r6, r4
 80002a8:	d105      	bne.n	80002b6 <__libc_init_array+0x2e>
 80002aa:	bd70      	pop	{r4, r5, r6, pc}
 80002ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b0:	4798      	blx	r3
 80002b2:	3601      	adds	r6, #1
 80002b4:	e7ee      	b.n	8000294 <__libc_init_array+0xc>
 80002b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ba:	4798      	blx	r3
 80002bc:	3601      	adds	r6, #1
 80002be:	e7f2      	b.n	80002a6 <__libc_init_array+0x1e>
 80002c0:	080002e8 	.word	0x080002e8
 80002c4:	080002e8 	.word	0x080002e8
 80002c8:	080002e8 	.word	0x080002e8
 80002cc:	080002ec 	.word	0x080002ec

080002d0 <_init>:
 80002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d2:	bf00      	nop
 80002d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d6:	bc08      	pop	{r3}
 80002d8:	469e      	mov	lr, r3
 80002da:	4770      	bx	lr

080002dc <_fini>:
 80002dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002de:	bf00      	nop
 80002e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e2:	bc08      	pop	{r3}
 80002e4:	469e      	mov	lr, r3
 80002e6:	4770      	bx	lr

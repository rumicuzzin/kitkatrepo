
W03-UART-example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000268  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003fc  080003fc  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003fc  080003fc  00002040  2**0
                  CONTENTS
  4 .ARM          00000000  080003fc  080003fc  00002040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003fc  080003fc  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003fc  080003fc  000013fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000400  08000400  00001400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08000404  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002040  2**0
                  CONTENTS
 10 .bss          0000001c  20000040  20000040  00002040  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000005c  2000005c  00002040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000166  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000007f  00000000  00000000  000021d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  00002255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000022aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  000022e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000093  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  000023c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  000023dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000040 	.word	0x20000040
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003e4 	.word	0x080003e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000044 	.word	0x20000044
 80001d0:	080003e4 	.word	0x080003e4

080001d4 <enable_peripheral_clocks>:
#include "definitions.s"


enable_peripheral_clocks:

	LDR R0, =RCC
 80001d4:	4853      	ldr	r0, [pc, #332]	@ (8000324 <end_loop+0x2>)

	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOC_ENABLE   @ enable GPIO
 80001d8:	f441 1120 	orr.w	r1, r1, #2621440	@ 0x280000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]

	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:


initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE
 80001e0:	4851      	ldr	r0, [pc, #324]	@ (8000328 <end_loop+0x6>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	@ 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #GPIO_MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <enable_uart>:

enable_uart:

	LDR R0, =GPIOC
 80001ea:	4850      	ldr	r0, [pc, #320]	@ (800032c <end_loop+0xa>)

	@ set the alternate function for the USART1 Pa9,10
	LDR R1, =0x77
 80001ec:	f04f 0177 	mov.w	r1, #119	@ 0x77
	STRB R1, [R0, AFRL + 2]
 80001f0:	f880 1022 	strb.w	r1, [r0, #34]	@ 0x22

	@ choose mode alternate function for Pa9,10
	LDR R1, =0x00A00A00 @ Mask for pins to change to 'alternate function mode'
 80001f4:	494e      	ldr	r1, [pc, #312]	@ (8000330 <end_loop+0xe>)
	STR R1, [R0, GPIO_MODER]
 80001f6:	6001      	str	r1, [r0, #0]

	@set the speed to high
	LDR R1, =0x00F00F00 @ Mask for pins to be set as high speed
 80001f8:	494e      	ldr	r1, [pc, #312]	@ (8000334 <end_loop+0x12>)
	STR R1, [R0, GPIO_OSPEEDR]
 80001fa:	6081      	str	r1, [r0, #8]

	@ enable bus for USART1
	LDR R0, =RCC
 80001fc:	4849      	ldr	r0, [pc, #292]	@ (8000324 <end_loop+0x2>)
	LDR R1, [R0, #APB2ENR]
 80001fe:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << UART_EN  @ apply the bit mask to the original value
 8000200:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
	STR R1, [R0, #APB2ENR]
 8000204:	6181      	str	r1, [r0, #24]

	@ default baud rate
	MOV R1, #0x46 @8Mhz/115200
 8000206:	f04f 0146 	mov.w	r1, #70	@ 0x46
	LDR R0, =UART @
 800020a:	484b      	ldr	r0, [pc, #300]	@ (8000338 <end_loop+0x16>)
	STRH R1, [R0, #USART_BRR]
 800020c:	8181      	strh	r1, [r0, #12]

	@ enable the functions
	LDR R0, =UART
 800020e:	484a      	ldr	r0, [pc, #296]	@ (8000338 <end_loop+0x16>)
	LDR R1, [R0, #USART_CR1]
 8000210:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with corresponding bits to '1' for enable
 8000212:	f041 010d 	orr.w	r1, r1, #13
														@whats gonna be used
	STR R1, [R0, #USART_CR1]
 8000216:	6001      	str	r1, [r0, #0]

	BX LR
 8000218:	4770      	bx	lr

0800021a <enable_uart4>:

enable_uart4:

	LDR R0, =GPIOC
 800021a:	4844      	ldr	r0, [pc, #272]	@ (800032c <end_loop+0xa>)

	@ set the alternate function for UART4
	LDR R1, =0x55
 800021c:	f04f 0155 	mov.w	r1, #85	@ 0x55

	STRB R1, [R0, AFRH+1]
 8000220:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25

	LDR R1, =0x00A00A00 @ Mask for pin pc10,11 to AF
 8000224:	4942      	ldr	r1, [pc, #264]	@ (8000330 <end_loop+0xe>)
	STR R1, [R0, GPIO_MODER]
 8000226:	6001      	str	r1, [r0, #0]

	@ set the speed for pc10,11 to high
	LDR R1, =0x00F00F00 @ Mask for pins
 8000228:	4942      	ldr	r1, [pc, #264]	@ (8000334 <end_loop+0x12>)
	STR R1, [R0, GPIO_OSPEEDR]
 800022a:	6081      	str	r1, [r0, #8]

	@ enable bus for UART4
	LDR R0, =RCC
 800022c:	483d      	ldr	r0, [pc, #244]	@ (8000324 <end_loop+0x2>)
	LDR R1, [R0, #APB1ENR]
 800022e:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART4_EN  @ apply the bit mask to the orginal value
 8000230:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
	STR R1, [R0, #APB1ENR]
 8000234:	61c1      	str	r1, [r0, #28]

	@ default baud rate 115200
	MOV R1, #0x46 @ same as enable_uart
 8000236:	f04f 0146 	mov.w	r1, #70	@ 0x46
	LDR R0, =UART4
 800023a:	4840      	ldr	r0, [pc, #256]	@ (800033c <end_loop+0x1a>)
	STRH R1, [R0, #USART_BRR]
 800023c:	8181      	strh	r1, [r0, #12]

	@ enable pin functions
	LDR R0, =UART4
 800023e:	483f      	ldr	r0, [pc, #252]	@ (800033c <end_loop+0x1a>)
	LDR R1, [R0, #USART_CR1]
 8000240:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ bit mask for enable, turning the corresponding bits to 1
 8000242:	f041 010d 	orr.w	r1, r1, #13
	STR R1, [R0, #USART_CR1]
 8000246:	6001      	str	r1, [r0, #0]

	BX LR
 8000248:	4770      	bx	lr

0800024a <change_clock_speed>:


change_clock_speed:

	@ enable
	LDR R0, =RCC
 800024a:	4836      	ldr	r0, [pc, #216]	@ (8000324 <end_loop+0x2>)
	LDR R1, [R0, #RCC_CR]
 800024c:	6801      	ldr	r1, [r0, #0]
	LDR R2, =1 << HSEBYP | 1 << HSEON @ bit mask with 1 at 0th position
 800024e:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
	ORR R1, R2 @ apply the bit mask
 8000252:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CR]
 8000256:	6001      	str	r1, [r0, #0]

08000258 <wait_for_HSERDY>:

wait_for_HSERDY:
@wait for the previous part is done
	LDR R1, [R0, #RCC_CR]
 8000258:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << HSERDY
 800025a:	f411 3f00 	tst.w	r1, #131072	@ 0x20000
	BEQ wait_for_HSERDY
 800025e:	d0fb      	beq.n	8000258 <wait_for_HSERDY>

@switch to PLL
	@ clock is set to External clock, f=8MHz
	LDR R1, [R0, #RCC_CFGR]
 8000260:	6841      	ldr	r1, [r0, #4]
	LDR R2, =1 << 20 | 1 << PLLSRC | 1 << 22 @ 1<<22, usb prescela to 1
 8000262:	f44f 02a2 	mov.w	r2, #5308416	@ 0x510000
	ORR R1, R2  @ set PLLSRC and PLLMUL to 0100 - bit 20 is 1 (set speed as 6x faster)
 8000266:	ea41 0102 	orr.w	r1, r1, r2
				@ NOTE: No faster than 72MHz)
	STR R1, [R0, #RCC_CFGR]
 800026a:	6041      	str	r1, [r0, #4]

	@ enable PLL and wait for complete
	LDR R0, =RCC
 800026c:	482d      	ldr	r0, [pc, #180]	@ (8000324 <end_loop+0x2>)
	LDR R1, [R0, #RCC_CR]
 800026e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << PLLON @ apply the bit mask to turn on the PLL
 8000270:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
	STR R1, [R0, #RCC_CR]
 8000274:	6001      	str	r1, [r0, #0]

08000276 <wait_for_PLLRDY>:

wait_for_PLLRDY:
	LDR R1, [R0, #RCC_CR]
 8000276:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << PLLRDY @ Test the HSERDY bit
 8000278:	f011 7f00 	tst.w	r1, #33554432	@ 0x2000000
	BEQ wait_for_PLLRDY
 800027c:	d0fb      	beq.n	8000276 <wait_for_PLLRDY>

@ step 3, PLL is ready, switch system clock to PLL
	LDR R0, =RCC
 800027e:	4829      	ldr	r0, [pc, #164]	@ (8000324 <end_loop+0x2>)
	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 8000280:	6841      	ldr	r1, [r0, #4]
	MOV R2, 1 << 10 | 1 << 1  @ some more settings - bit 1 (SW = 10)  - PLL set as system clock
 8000282:	f240 4202 	movw	r2, #1026	@ 0x402
									   @ bit 10 (HCLK=100) divided by 2 (clock is faster, need to prescale for peripherals)
	ORR R1, R2	@ Set the values of these two clocks (turn them on)
 8000286:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 800028a:	6041      	str	r1, [r0, #4]

	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 800028c:	6841      	ldr	r1, [r0, #4]
	ORR R1, 1 << USBPRE	@ Set the USB prescaler (when PLL is on for the USB)
 800028e:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 8000292:	6041      	str	r1, [r0, #4]

	BX LR
 8000294:	4770      	bx	lr

08000296 <initialise_power>:

@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:

	LDR R0, =RCC
 8000296:	4823      	ldr	r0, [pc, #140]	@ (8000324 <end_loop+0x2>)

	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 8000298:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 800029a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
	STR R1, [R0, #APB1ENR]
 800029e:	61c1      	str	r1, [r0, #28]

	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 80002a0:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask for system configeration
 80002a2:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 80002a6:	6181      	str	r1, [r0, #24]

	BX LR
 80002a8:	4770      	bx	lr

080002aa <set_baud_rate>:

@extra function for change baud rate if clock speed is changed
set_baud_rate:
	LDR R0, =UART4 @change this uart base address to the uart will be used
 80002aa:	4824      	ldr	r0, [pc, #144]	@ (800033c <end_loop+0x1a>)
	MOV R1, #0x1A1	@value given by calculation using f=8MHz, baud rate = 115200
 80002ac:	f240 11a1 	movw	r1, #417	@ 0x1a1
	STRH R1, [R0, #USART_BRR]
 80002b0:	8181      	strh	r1, [r0, #12]

	BX LR
 80002b2:	4770      	bx	lr

080002b4 <main>:
incoming_buffer: .space 62
buffer_length: .byte 62
.text

main:
	BL initialise_power
 80002b4:	f7ff ffef 	bl	8000296 <initialise_power>
	BL enable_peripheral_clocks
 80002b8:	f7ff ff8c 	bl	80001d4 <enable_peripheral_clocks>
	BL enable_uart4
 80002bc:	f7ff ffad 	bl	800021a <enable_uart4>
	@uncomment the BOTH TWO lines under to change the clock speed (*6) for Ex3c
	@BL change_clock_speed
	@BL set_baud_rate

	LDR R0, =UART4 @save address of UART to R0
 80002c0:	481e      	ldr	r0, [pc, #120]	@ (800033c <end_loop+0x1a>)
	LDR R1, =incoming_buffer	@save the address of buffer to R1
 80002c2:	491f      	ldr	r1, [pc, #124]	@ (8000340 <end_loop+0x1e>)
	LDR R2, =terminate_char	@save adress of terminate_char to R2
 80002c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000344 <end_loop+0x22>)
	LDRB R2, [R2]
 80002c6:	7812      	ldrb	r2, [r2, #0]

	MOV R3, #0 @counter
 80002c8:	f04f 0300 	mov.w	r3, #0

080002cc <loop>:

loop:

	LDR R4, [R0, USART_ISR]	@status of uart
 80002cc:	69c4      	ldr	r4, [r0, #28]
	TST R4, 1 << UART_ORE | 1 << UART_FE @Do a AND of the current status and the bit mask or ore and fe
 80002ce:	f014 0f0a 	tst.w	r4, #10

	BNE clear_errors
 80002d2:	d110      	bne.n	80002f6 <clear_errors>

	TST R4, 1 << UART_RXNE
 80002d4:	f014 0f20 	tst.w	r4, #32

	BEQ loop
 80002d8:	d0f8      	beq.n	80002cc <loop>

	LDRB R5, [R0, USART_RDR]
 80002da:	f890 5024 	ldrb.w	r5, [r0, #36]	@ 0x24
	STRB R5, [R1, R3]
 80002de:	54cd      	strb	r5, [r1, r3]

	ADD R3, #1
 80002e0:	f103 0301 	add.w	r3, r3, #1

	CMP R5, R2
 80002e4:	4295      	cmp	r5, r2
	BNE keep_going
 80002e6:	d101      	bne.n	80002ec <keep_going>

	@uncomment the line under for Ex3d
	B transmitting
 80002e8:	e00a      	b.n	8000300 <transmitting>

	B end_loop
 80002ea:	e01a      	b.n	8000322 <end_loop>

080002ec <keep_going>:
keep_going:
	LDR R4, [R0, USART_RQR]
 80002ec:	6984      	ldr	r4, [r0, #24]
	ORR R4, 1 << UART_RXFRQ
 80002ee:	f044 0408 	orr.w	r4, r4, #8
	STR R4, [R0, USART_RQR]
 80002f2:	6184      	str	r4, [r0, #24]

	BGT loop
 80002f4:	dcea      	bgt.n	80002cc <loop>

080002f6 <clear_errors>:
clear_errors:
@clear overrun and frame error
	LDR R4, [R0, USART_ICR]
 80002f6:	6a04      	ldr	r4, [r0, #32]
	ORR R4, 1 << UART_ORECF | 1 << UART_FECF @ clear the flags
 80002f8:	f044 0408 	orr.w	r4, r4, #8
	STR R4, [R0, USART_ICR]	@store the status back
 80002fc:	6204      	str	r4, [r0, #32]
	B loop
 80002fe:	e7e5      	b.n	80002cc <loop>

08000300 <transmitting>:

transmitting:
	BL enable_uart
 8000300:	f7ff ff73 	bl	80001ea <enable_uart>
	@*uncomment the BOTH TWO line under if the above change_clock_speed and set_baud_rate is used
	@BL change_clock_speed
	@BL set_baud_rate

	LDR R0, =UART	@save address of UART to R0
 8000304:	480c      	ldr	r0, [pc, #48]	@ (8000338 <end_loop+0x16>)
	LDR R1, =incoming_buffer	@save the address of buffer to R1
 8000306:	490e      	ldr	r1, [pc, #56]	@ (8000340 <end_loop+0x1e>)
	LDR R2, =terminate_char	@save adress of terminate_char to R2
 8000308:	4a0e      	ldr	r2, [pc, #56]	@ (8000344 <end_loop+0x22>)
	LDRB R2, [R2]
 800030a:	7812      	ldrb	r2, [r2, #0]

0800030c <transmitting_loop>:
transmitting_loop:
	LDR R3, [R0, USART_ISR]
 800030c:	69c3      	ldr	r3, [r0, #28]
	ANDS R3, 1 << UART_TXE
 800030e:	f013 0380 	ands.w	r3, r3, #128	@ 0x80

	BEQ transmitting_loop
 8000312:	d0fb      	beq.n	800030c <transmitting_loop>

	LDRB R4, [R1], #1
 8000314:	f811 4b01 	ldrb.w	r4, [r1], #1
	STRB R4, [R0, USART_TDR]
 8000318:	f880 4028 	strb.w	r4, [r0, #40]	@ 0x28

	CMP R4, R2
 800031c:	4294      	cmp	r4, r2
	BNE transmitting_loop
 800031e:	d1f5      	bne.n	800030c <transmitting_loop>

	B end_loop
 8000320:	e7ff      	b.n	8000322 <end_loop>

08000322 <end_loop>:
end_loop:

	B end_loop
 8000322:	e7fe      	b.n	8000322 <end_loop>
	LDR R0, =RCC
 8000324:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE
 8000328:	48001000 	.word	0x48001000
	LDR R0, =GPIOC
 800032c:	48000800 	.word	0x48000800
	LDR R1, =0x00A00A00 @ Mask for pins to change to 'alternate function mode'
 8000330:	00a00a00 	.word	0x00a00a00
	LDR R1, =0x00F00F00 @ Mask for pins to be set as high speed
 8000334:	00f00f00 	.word	0x00f00f00
	LDR R0, =UART @
 8000338:	40013800 	.word	0x40013800
	LDR R0, =UART4
 800033c:	40004c00 	.word	0x40004c00
	LDR R1, =incoming_buffer	@save the address of buffer to R1
 8000340:	20000001 	.word	0x20000001
	LDR R2, =terminate_char	@save adress of terminate_char to R2
 8000344:	20000000 	.word	0x20000000

08000348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000348:	480d      	ldr	r0, [pc, #52]	@ (8000380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800034c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000350:	480c      	ldr	r0, [pc, #48]	@ (8000384 <LoopForever+0x6>)
  ldr r1, =_edata
 8000352:	490d      	ldr	r1, [pc, #52]	@ (8000388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000354:	4a0d      	ldr	r2, [pc, #52]	@ (800038c <LoopForever+0xe>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800035c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000366:	4a0a      	ldr	r2, [pc, #40]	@ (8000390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000368:	4c0a      	ldr	r4, [pc, #40]	@ (8000394 <LoopForever+0x16>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000376:	f000 f811 	bl	800039c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037a:	f7ff ff9b 	bl	80002b4 <main>

0800037e <LoopForever>:

LoopForever:
    b LoopForever
 800037e:	e7fe      	b.n	800037e <LoopForever>
  ldr   r0, =_estack
 8000380:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800038c:	08000404 	.word	0x08000404
  ldr r2, =_sbss
 8000390:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000394:	2000005c 	.word	0x2000005c

08000398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC1_2_IRQHandler>
	...

0800039c <__libc_init_array>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	4d0d      	ldr	r5, [pc, #52]	@ (80003d4 <__libc_init_array+0x38>)
 80003a0:	4c0d      	ldr	r4, [pc, #52]	@ (80003d8 <__libc_init_array+0x3c>)
 80003a2:	1b64      	subs	r4, r4, r5
 80003a4:	10a4      	asrs	r4, r4, #2
 80003a6:	2600      	movs	r6, #0
 80003a8:	42a6      	cmp	r6, r4
 80003aa:	d109      	bne.n	80003c0 <__libc_init_array+0x24>
 80003ac:	4d0b      	ldr	r5, [pc, #44]	@ (80003dc <__libc_init_array+0x40>)
 80003ae:	4c0c      	ldr	r4, [pc, #48]	@ (80003e0 <__libc_init_array+0x44>)
 80003b0:	f000 f818 	bl	80003e4 <_init>
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	2600      	movs	r6, #0
 80003ba:	42a6      	cmp	r6, r4
 80003bc:	d105      	bne.n	80003ca <__libc_init_array+0x2e>
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c4:	4798      	blx	r3
 80003c6:	3601      	adds	r6, #1
 80003c8:	e7ee      	b.n	80003a8 <__libc_init_array+0xc>
 80003ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ce:	4798      	blx	r3
 80003d0:	3601      	adds	r6, #1
 80003d2:	e7f2      	b.n	80003ba <__libc_init_array+0x1e>
 80003d4:	080003fc 	.word	0x080003fc
 80003d8:	080003fc 	.word	0x080003fc
 80003dc:	080003fc 	.word	0x080003fc
 80003e0:	08000400 	.word	0x08000400

080003e4 <_init>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr

080003f0 <_fini>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

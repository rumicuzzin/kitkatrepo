.syntax unified
.thumb

.global main

#include "initialise.s"

.data
@ define variables

.align
incoming_buffer: .space 62
buffer_length: .byte 62
terminate_char: .byte '!'
ciphertext: .space 50                @ save the string after caser cipher
.text
@ define text


@ this is the entry function called from the c file
main:

	@ in class run through the functions to perform the config of the ports
	@ for more details on changing the UART, refer to the week 3 live lecture/tutorial session.

	BL initialise_power
	@BL change_clock_speed
	BL enable_peripheral_clocks
	BL enable_uart


	LDR R0, =UART
	LDR R1, = incoming_buffer
	LDR R2, = terminate_char
	LDRB R2, [R2]

	MOV R3, #0 @counter


 rx_uart:
	LDR R4, [R0, USART_ISR] @ load the status of the UART
	TST R4, 1 << UART_RXNE

	BEQ rx_uart

	LDRB R5, [R0, #USART_RDR]
	CMP R5, R2
	BEQ if_palindrome
	STRB R5, [R1, R3]
	ADD R3, #1
	B keep_going


	B if_palindrome

if_palindrome:
	LDR R1, = incoming_buffer
	MOV R2, #0
	MOV R5, #0

string_length:
	MOV R0, #0
	MOV R4, #0

string_length_loop:
  LDRB R3, [R1,R4]       		 @ load the next letter
	CMP R3, #0                  @check if it is '0'
  BEQ found_length            @if is '0' jump out of the loop
  ADD R4, R4, #1              @ mov to the next letter in the string
  B string_length_loop

  found_length:
    MOV R4, R4

Check_loop:
    LDRB R3, [R1,R2]    @ load the each letter
    CMP R3, #0
    BEQ is_palindrome

    CMP R3, #65
    BLT skip_function     @ R3 < 65，skip

    CMP R3, #90
    BLE Lowercase_function @ 65 ≤ R3 ≤ 90，transfer to lowercase

	B skip_function

 skip_function:
    STRB R3, [R1, R2]    @ store the origin letter
 	B Continue_loop

Continue_loop:
    ADD R2, #1           @ load the next letter
    B Check_loop         @ move no the loop

Lowercase_function:
    ADD R3, R3, #0x20    @ uppercase to lowercase
    B store_and_continue

store_and_continue:
    STRB R3, [R1, R2]    @ store the letter after lowercase transfer
    ADD R2, #1           @ move to the next letter
    B Check_loop

is_palindrome:
	MOV R2, R4
	SUB R2, R2 ,#1

palindrome_check:
	MOV R5, R1	   @use to read the string in forward
	MOV R6, R1     @use to read the string in backward
	LDRB R7, [R1], #1
	LDRB R8, [R6,R2]
	CMP R7, R8
	BNE not_palindrome

	ADD R2, R2, #-1
	CMP R1, R2
	BGE end_palindrome

	B palindrome_check

not_palindrome:
	B tx_uart4_nocoding

end_palindrome:
    MOV R0, #1
    B coding                   @ is palindrome, return 1 in R0


coding:
	LDR R1, =incoming_buffer
    LDR R0, =ciphertext
    MOV R2, #3              @ shift（is changeable）

coding_loop:
	LDRB R3, [R1], #1       
    CMP R3, #0              
    BEQ tx_uart4_coding

    CMP R3, #'a'
    BLT store_char          @ not a-z, store
    CMP R3, #'z'
    BGT store_char          @ not a-z, store

    ADD R3, R3, R2          @ add shift
    CMP R3, #'z'
    BLE store_char
    SUB R3, R3, #26         @ over 'z' back to 'a'

store_char:
    STRB R3, [R0], #1       @ load the string after cipher
    B coding_loop           @ continue loop

tx_uart4_coding:
	BL enable_uart4
	LDR R12, = UART4
	LDR R0, = ciphertext
	LDR R2, = terminate_char
	LDRB R2, [R2]

tx_uart_coding:
	LDR R11, [R12, USART_ISR] @ load the status of the UART
	ANDS R11, 1 << UART_TXE  @ 'AND' the current status with the bit mask that we are interested in
						    @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	@ loop back to check status again if the flag indicates there is no byte waiting
	BEQ tx_uart_coding

	@ load the next value in the string into the transmit buffer for the specified UART
	LDRB R7, [R0], #1
	STRB R7, [R12, USART_TDR]
	CMP R7, R2
	BEQ finish
	@ loop back to the start
	B tx_uart_coding

tx_uart4_nocoding:
	BL enable_uart4
	LDR R12, = UART4
	LDR R1, = incoming_buffer
	LDR R2, = terminate_char
	LDRB R2, [R2]

tx_uart_nocoding:
	LDR R11, [R12, USART_ISR] @ load the status of the UART
	ANDS R11, 1 << UART_TXE  @ 'AND' the current status with the bit mask that we are interested in
						    @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	@ loop back to check status again if the flag indicates there is no byte waiting
	BEQ tx_uart_nocoding

	@ load the next value in the string into the transmit buffer for the specified UART
	LDRB R7, [R1], #1
	STRB R7, [R12, USART_TDR]
	CMP R7, R2
	BEQ finish
	@ loop back to the start
	B tx_uart_nocoding

delay_loop:
	LDR R9, =0xfffff

delay_inner:
	@ notice the SUB has an S on the end, this means it alters the condition register
	@ and can be used to make a branching decision.
	SUBS R9, #1
	BGT delay_inner
	BX LR

finish:
	B finish
keep_going:
	BGT rx_uart              @ Return from function

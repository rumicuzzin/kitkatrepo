
EX3A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800034c  0800034c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800034c  0800034c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800034c  0800034c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800034c  0800034c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800034c  0800034c  0000134c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000350  08000350  00001350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000354  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000011f  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000075  00000000  00000000  00002153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  0000221d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000089  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00002329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00002344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000334 	.word	0x08000334

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000334 	.word	0x08000334

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"

@Function to enable the clocks for the peripherals
enable_peripheral_clocks:
	LDR R0, = RCC
 80001d4:	482a      	ldr	r0, [pc, #168]	@ (8000280 <delay_inner+0xa>)

	@Enable all of the GPIO peripheral clocks in AHBENR
	LDR R1, [R0, #AHBENR]		@Address for RCC clock
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	@ 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR
 80001de:	4770      	bx	lr

080001e0 <enable_uart4>:

@Function to enable a UART4
enable_uart4:
	LDR R0, = GPIOC				@Using port C for alternative function
 80001e0:	4828      	ldr	r0, [pc, #160]	@ (8000284 <delay_inner+0xe>)

	@Set the alternate function for the UART pins
	LDR R1, = 0x55				@Alternate function five 0101 = 0x5
 80001e2:	f04f 0155 	mov.w	r1, #85	@ 0x55
	STRB R1, [R0, AFRH + 1]		@Set to alternate function (pins 10 and 11) (+ 1 for second byte)
 80001e6:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25

	@Modify the mode of the GPIO to alternate
	LDR R1, [R0, GPIO_MODER]	@Alternate function mode for port C
 80001ea:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00000 			@Mask for pins (PC10 to PC11) 0xA = 1010
 80001ec:	f441 0120 	orr.w	r1, r1, #10485760	@ 0xa00000
	STR R1, [R0, GPIO_MODER]	@Store
 80001f0:	6001      	str	r1, [r0, #0]

	@Modify speed of the GPIO pins to high speed
	LDR R1, [R0, GPIO_OSPEEDR]	@Address for speed control
 80001f2:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00000			@Mask for pins to be set as high speed
 80001f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
	STR R1, [R0, GPIO_OSPEEDR]
 80001f8:	6081      	str	r1, [r0, #8]

	@ Set the enable bit for UART4
	LDR R0, =RCC 				@The base address for the register to turn clocks on/off
 80001fa:	4821      	ldr	r0, [pc, #132]	@ (8000280 <delay_inner+0xa>)
	LDR R1, [R0, #APB1ENR] 		@Load the original value from the enable register
 80001fc:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART4_EN  		@Apply the bit mask to the previous values of the enable the UART
 80001fe:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
	STR R1, [R0, #APB1ENR] 		@Store the modified enable register values back to RCC
 8000202:	61c1      	str	r1, [r0, #28]

	@Baud rate
	MOV R1, #0x46 				@For 8MHz
 8000204:	f04f 0146 	mov.w	r1, #70	@ 0x46
	LDR R0, = UART4 			@The base address for the register to turn clocks on/off
 8000208:	481f      	ldr	r0, [pc, #124]	@ (8000288 <delay_inner+0x12>)
	STRH R1, [R0, #USART_BRR] 	@Store this value directly in the first half word (16 bits)
 800020a:	8181      	strh	r1, [r0, #12]

	@Enable USART
	LDR R0, = UART4 			@Base address
 800020c:	481e      	ldr	r0, [pc, #120]	@ (8000288 <delay_inner+0x12>)
	LDR R1, [R0, #USART_CR1] 	@Load the original value from the enable register
 800020e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @Make a bit mask with a '1' for the bits to enable,
 8000210:	f041 010d 	orr.w	r1, r1, #13
	STR R1, [R0, #USART_CR1] 	@Store the modified enable register values back to RCC
 8000214:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000216:	4770      	bx	lr

08000218 <enable_button>:

@Function to enable putton on port A
enable_button:
	LDR R0, = GPIOA				@Base address
 8000218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	LDRB R1, [R0, #GPIO_MODER] 		@Load the low byte of the MODER register
 800021c:	7801      	ldrb	r1, [r0, #0]
	AND R1, #0b11111100			@Bit mask to enable input mode
 800021e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
	STRB R1, [R0, #GPIO_MODER]
 8000222:	7001      	strb	r1, [r0, #0]

	BX LR
 8000224:	4770      	bx	lr

08000226 <main>:
ARNOLDSCHWARZENEGGER: .asciz "!"  		@Terminating character

.text

main:
	BL enable_peripheral_clocks
 8000226:	f7ff ffd5 	bl	80001d4 <enable_peripheral_clocks>
	BL enable_uart4
 800022a:	f7ff ffd9 	bl	80001e0 <enable_uart4>
	BL enable_button
 800022e:	f7ff fff3 	bl	8000218 <enable_button>
	
	LDR R1, = tx_string		@Load string address
 8000232:	4916      	ldr	r1, [pc, #88]	@ (800028c <delay_inner+0x16>)

08000234 <transmit_loop>:

	transmit_loop:
		BL check_button		@Check button
 8000234:	f000 f803 	bl	800023e <check_button>

		BL tx_loop			@Transmit
 8000238:	f000 f808 	bl	800024c <tx_loop>

		B transmit_loop		@Loop for next value
 800023c:	e7fa      	b.n	8000234 <transmit_loop>

0800023e <check_button>:

check_button:
	LDR R0, = GPIOA				@Load IO address
 800023e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	LDR R4, [R0, IDR]			@Load input value
 8000242:	6904      	ldr	r4, [r0, #16]
	TST R4, #1 << BUTTON_PIN	@Compare input value
 8000244:	f014 0f01 	tst.w	r4, #1

	BEQ check_button			@Loop if no input
 8000248:	d0f9      	beq.n	800023e <check_button>

	BX LR						@Branch back to function call
 800024a:	4770      	bx	lr

0800024c <tx_loop>:

tx_loop:
	LDRB R2, [R1], #1		@Load value
 800024c:	f811 2b01 	ldrb.w	r2, [r1], #1
	CMP R2, NULL			@Check for null character
 8000250:	2a00      	cmp	r2, #0
	
	BEQ terminate			@Time to terminate
 8000252:	d000      	beq.n	8000256 <terminate>
	
	B tx_uart				@Branch to send char
 8000254:	e004      	b.n	8000260 <tx_uart>

08000256 <terminate>:

terminate:
	LDR R0, = ARNOLDSCHWARZENEGGER
 8000256:	480e      	ldr	r0, [pc, #56]	@ (8000290 <delay_inner+0x1a>)
	LDRB R2, [R0]				@Append terminator
 8000258:	7802      	ldrb	r2, [r0, #0]
	BL tx_uart
 800025a:	f000 f801 	bl	8000260 <tx_uart>

	BX LR						@Exit program
 800025e:	4770      	bx	lr

08000260 <tx_uart>:

tx_uart:
	LDR R0, = UART4				@Load base address
 8000260:	4809      	ldr	r0, [pc, #36]	@ (8000288 <delay_inner+0x12>)
	LDR R3, [R0, USART_ISR]		@Load the status of the UART
 8000262:	69c3      	ldr	r3, [r0, #28]
	TST R3, #1 << UART_TXE  	@Check if transmit buffer is ready for more data
 8000264:	f013 0f80 	tst.w	r3, #128	@ 0x80
	
	BEQ tx_uart					@Reloop until ready for transmit
 8000268:	d0fa      	beq.n	8000260 <tx_uart>

	STRB R2, [R0, USART_TDR] 	@Load the next value in the string into the transmit data register
 800026a:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28

	B delay_loop				@Delay
 800026e:	e7ff      	b.n	8000270 <delay_loop>

08000270 <delay_loop>:

delay_loop:
	LDR R9, = 0xfffff			@Set arbitary large number
 8000270:	f8df 9020 	ldr.w	r9, [pc, #32]	@ 8000294 <delay_inner+0x1e>

	B delay_inner
 8000274:	e7ff      	b.n	8000276 <delay_inner>

08000276 <delay_inner>:

delay_inner:
	SUBS R9, #1					@Decrement delay
 8000276:	f1b9 0901 	subs.w	r9, r9, #1
	BGT delay_inner
 800027a:	dcfc      	bgt.n	8000276 <delay_inner>
	
	BX LR 						@Return 
 800027c:	4770      	bx	lr
 800027e:	0000      	.short	0x0000
	LDR R0, = RCC
 8000280:	40021000 	.word	0x40021000
	LDR R0, = GPIOC				@Using port C for alternative function
 8000284:	48000800 	.word	0x48000800
	LDR R0, = UART4 			@The base address for the register to turn clocks on/off
 8000288:	40004c00 	.word	0x40004c00
	LDR R1, = tx_string		@Load string address
 800028c:	20000000 	.word	0x20000000
	LDR R0, = ARNOLDSCHWARZENEGGER
 8000290:	20000002 	.word	0x20000002
	LDR R9, = 0xfffff			@Set arbitary large number
 8000294:	000fffff 	.word	0x000fffff

08000298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000298:	480d      	ldr	r0, [pc, #52]	@ (80002d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800029c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a0:	480c      	ldr	r0, [pc, #48]	@ (80002d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a2:	490d      	ldr	r1, [pc, #52]	@ (80002d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a4:	4a0d      	ldr	r2, [pc, #52]	@ (80002dc <LoopForever+0xe>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a8:	e002      	b.n	80002b0 <LoopCopyDataInit>

080002aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ae:	3304      	adds	r3, #4

080002b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b4:	d3f9      	bcc.n	80002aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b6:	4a0a      	ldr	r2, [pc, #40]	@ (80002e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b8:	4c0a      	ldr	r4, [pc, #40]	@ (80002e4 <LoopForever+0x16>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002bc:	e001      	b.n	80002c2 <LoopFillZerobss>

080002be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c0:	3204      	adds	r2, #4

080002c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c4:	d3fb      	bcc.n	80002be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c6:	f000 f811 	bl	80002ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ca:	f7ff ffac 	bl	8000226 <main>

080002ce <LoopForever>:

LoopForever:
  b LoopForever
 80002ce:	e7fe      	b.n	80002ce <LoopForever>
  ldr   r0, =_estack
 80002d0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002dc:	08000354 	.word	0x08000354
  ldr r2, =_sbss
 80002e0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002e4:	20000020 	.word	0x20000020

080002e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC1_2_IRQHandler>
	...

080002ec <__libc_init_array>:
 80002ec:	b570      	push	{r4, r5, r6, lr}
 80002ee:	4d0d      	ldr	r5, [pc, #52]	@ (8000324 <__libc_init_array+0x38>)
 80002f0:	4c0d      	ldr	r4, [pc, #52]	@ (8000328 <__libc_init_array+0x3c>)
 80002f2:	1b64      	subs	r4, r4, r5
 80002f4:	10a4      	asrs	r4, r4, #2
 80002f6:	2600      	movs	r6, #0
 80002f8:	42a6      	cmp	r6, r4
 80002fa:	d109      	bne.n	8000310 <__libc_init_array+0x24>
 80002fc:	4d0b      	ldr	r5, [pc, #44]	@ (800032c <__libc_init_array+0x40>)
 80002fe:	4c0c      	ldr	r4, [pc, #48]	@ (8000330 <__libc_init_array+0x44>)
 8000300:	f000 f818 	bl	8000334 <_init>
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	10a4      	asrs	r4, r4, #2
 8000308:	2600      	movs	r6, #0
 800030a:	42a6      	cmp	r6, r4
 800030c:	d105      	bne.n	800031a <__libc_init_array+0x2e>
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f855 3b04 	ldr.w	r3, [r5], #4
 8000314:	4798      	blx	r3
 8000316:	3601      	adds	r6, #1
 8000318:	e7ee      	b.n	80002f8 <__libc_init_array+0xc>
 800031a:	f855 3b04 	ldr.w	r3, [r5], #4
 800031e:	4798      	blx	r3
 8000320:	3601      	adds	r6, #1
 8000322:	e7f2      	b.n	800030a <__libc_init_array+0x1e>
 8000324:	0800034c 	.word	0x0800034c
 8000328:	0800034c 	.word	0x0800034c
 800032c:	0800034c 	.word	0x0800034c
 8000330:	08000350 	.word	0x08000350

08000334 <_init>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr

08000340 <_fini>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr

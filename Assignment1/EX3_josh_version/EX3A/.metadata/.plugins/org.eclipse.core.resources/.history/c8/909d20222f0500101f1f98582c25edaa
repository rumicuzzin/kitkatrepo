.syntax unified
.thumb

#include "definitions.s"

@Function to enable the clocks for the peripherals
enable_peripheral_clocks:
	LDR R0, = RCC

	@Enable all of the GPIO peripheral clocks in AHBENR
	LDR R1, [R0, #AHBENR]		@Address for RCC clock
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
	STR R1, [R0, #AHBENR]
	BX LR

@Function to enable a UART4
enable_uart4:
	LDR R0, = GPIOC				@Using port C for alternative function

	@Set the alternate function for the UART pins
	LDR R1, = 0x55				@Alternate function five 0101 = 0x5
	STRB R1, [R0, AFRH + 1]		@Set to alternate function (pins 10 and 11) (+ 1 for second byte)

	@Modify the mode of the GPIO to alternate
	LDR R1, [R0, GPIO_MODER]	@Alternate function mode for port C
	ORR R1, 0xA00000 			@Mask for pins (PC10 to PC11) 0xA = 1010
	STR R1, [R0, GPIO_MODER]	@Store

	@Modify speed of the GPIO pins to high speed
	LDR R1, [R0, GPIO_OSPEEDR]	@Address for speed control
	ORR R1, 0xF00000			@Mask for pins to be set as high speed
	STR R1, [R0, GPIO_OSPEEDR]

	@ Set the enable bit for UART4
	LDR R0, =RCC 				@The base address for the register to turn clocks on/off
	LDR R1, [R0, #APB1ENR] 		@Load the original value from the enable register
	ORR R1, 1 << UART4_EN  		@Apply the bit mask to the previous values of the enable the UART
	STR R1, [R0, #APB1ENR] 		@Store the modified enable register values back to RCC

	@Baud rate
	MOV R1, #0x46 				@For 8MHz
	LDR R0, = UART4 			@The base address for the register to turn clocks on/off
	STRH R1, [R0, #USART_BRR] 	@Store this value directly in the first half word (16 bits)

	@Enable USART
	LDR R0, = UART4 			@Base address
	LDR R1, [R0, #USART_CR1] 	@Load the original value from the enable register
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @Make a bit mask with a '1' for the bits to enable,
	STR R1, [R0, #USART_CR1] 	@Store the modified enable register values back to RCC

	BX LR @ return

@Function to enable putton on port A
enable_button:
	LDR R0, = GPIOA				@Base address
	LDRB R1, [R0, #GPIO_MODER] 		@Load the low byte of the MODER register
	AND R1, #0b11111100			@Bit mask to enable input mode
	STRB R1, [R0, #GPIO_MODER]

	BX LR

@ set the PLL (clocks are described in page 125 of the large manual)
change_clock_speed:
@ step 1, set clock to HSE (the external clock)
	@ enable HSE (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
	LDR R2, =1 << HSEBYP | 1 << HSEON @ make a bit mask with a '1' in the 0th bit position
	ORR R1, R2 @ apply the bit mask to the previous values of the enable register
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC

	@ wait for the changes to be completed
wait_for_HSERDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
	TST R1, 1 << HSERDY @ Test the HSERDY bit (check if it is 1)
	BEQ wait_for_HSERDY

@ step 2, now the clock is HSE, we are allowed to switch to PLL
	@ clock is set to External clock (external crystal) - 8MHz, can enable the PLL now
	LDR R1, [R0, #RCC_CFGR] @ load the original value from the enable register
	LDR R2, =1 << 20 | 1 << PLLSRC | 1 << 22 @ the last term is for the USB prescaler to be 1
	ORR R1, R2  @ set PLLSRC (use PLL) and PLLMUL to 0100 - bit 20 is 1 (set speed as 6x faster)
				@ see page 140 of the large manual for options
				@ NOTE: cannot go faster than 72MHz)
	STR R1, [R0, #RCC_CFGR] @ store the modified enable register values back to RCC

	@ enable PLL (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
	ORR R1, 1 << PLLON @ apply the bit mask to turn on the PLL
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC

wait_for_PLLRDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
	TST R1, 1 << PLLRDY @ Test the HSERDY bit (check if it is 1)
	BEQ wait_for_PLLRDY

@ step 3, PLL is ready, switch over the system clock to PLL
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
	MOV R2, 1 << 10 | 1 << 1  @ some more settings - bit 1 (SW = 10)  - PLL set as system clock
									   @ bit 10 (HCLK=100) divided by 2 (clock is faster, need to prescale for peripherals)
	ORR R1, R2	@ Set the values of these two clocks (turn them on)
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule

	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
	ORR R1, 1 << USBPRE	@ Set the USB prescaler (when PLL is on for the USB)
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule

	BX LR @ return



@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:

	LDR R0, =RCC @ the base address for the register to turn clocks on/off

	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
	STR R1, [R0, #APB1ENR]

	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
	STR R1, [R0, #APB2ENR]

	BX LR @ return

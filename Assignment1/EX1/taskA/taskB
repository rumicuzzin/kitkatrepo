.syntax unified
.thumb

.global main


.data
@ define variables

string_buffer: .asciz "HH" @ Define a null-terminated string
byte_array: .byte 0, 1, 2, 3, 4, 5, 6
word_array: .word 0x00, 0x40, 0x80, 0xc0, 0x10, 0x14, 0xffffffff
.text
@ define text


@ this is the entry function called from the startup file
main:
 LDR R1, =string_buffer  @ the address of the string
 LDR R2, =0x00

string_length:
	MOV R0, #0
	MOV R4, #0
string_length_loop:
	LDRB R3, [R1,R4]       @ 加载下一个字符
	CMP R3, #0                  @ 检查是否为字符串结束符'\0'
    BEQ found_length            @ 如果遇到'\0'，跳出循环
    ADD R4, R4, #1              @ 向后移动指针
    B string_length_loop
found_length:
    MOV R4, R4                  @ 返回字符串的长度

Check_loop:
    LDRB R3, [R1,R2]    @ 读取字符串中的当前字符
    CMP R3, #0
    BEQ is_palindrome

    CMP R3, #65
    BLT skip_function     @ R3 < 65，跳过转换

    CMP R3, #90
    BLE Lowercase_function @ 65 ≤ R3 ≤ 90，转换小写

	B skip_function

skip_function:
    STRB R3, [R1, R2]    @ 直接存储原字符
 	B Continue_loop

Continue_loop:
    ADD R2, #1           @ 处理下一个字符
    B Check_loop         @ 继续循环

Lowercase_function:
    ADD R3, R3, #0x20    @ 大写字母变小写
    B store_and_continue

store_and_continue:
    STRB R3, [R1, R2]    @ 存储转换后的字符
    ADD R2, #1           @ 处理下一个字符
    B Check_loop

is_palindrome:
	MOV R2, R4
	SUB R2, R2 ,#1

palindrome_check:
	MOV R5, R1	@储存字符串的地址用于正向读取
	MOV R6, R1 @储存字符串的地址用于反向读取
	LDRB R7, [R1], #1
	LDRB R8, [R6,R2]
	CMP R7, R8
	BNE not_palindrome

	ADD R2, R2, #-1
	CMP R1, R2
	BGE end_palindrome

	B palindrome_check

not_palindrome:
	MOV R0, #0
	B end

end_palindrome:
    MOV R0, #1                  @ 是回文，返回1
    B end
end:
	B end

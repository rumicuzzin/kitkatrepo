
Ex1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000174  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000308  08000308  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000308  08000308  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000308  08000308  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000308  08000308  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000308  08000308  00001308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800030c  0800030c  0000130c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000310  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_line   000000f5  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000093  00000000  00000000  00002129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  00002211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000000af  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00002347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00002360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002f0 	.word	0x080002f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080002f0 	.word	0x080002f0

080001d4 <main>:
string: .asciz "dog"  @ Define null-terminated string

.text  @ Start of code section

main:
    MOV R2, #SHIFT_VAL  @ Set the shift value
 80001d4:	f04f 0201 	mov.w	r2, #1

    @ Calculate absolute value and direction
    CMP R2, #0          @ Check if shift value is negative
 80001d8:	2a00      	cmp	r2, #0
    BGE positive_shift  @ Branch if shift is positive or zero
 80001da:	da04      	bge.n	80001e6 <positive_shift>
    NEG R2, R2          @ Get absolute value of shift
 80001dc:	f1c2 0200 	rsb	r2, r2, #0
    MOV R1, #1          @ Set direction flag to 1 (backward)
 80001e0:	f04f 0101 	mov.w	r1, #1
    B normalize_shift
 80001e4:	e001      	b.n	80001ea <normalize_shift>

080001e6 <positive_shift>:

positive_shift:
    MOV R1, #0          @ Set direction flag to 0 (forward)
 80001e6:	f04f 0100 	mov.w	r1, #0

080001ea <normalize_shift>:

normalize_shift:
    @ Normalize shift to be within alphabet size
    CMP R2, #ALPHA_SIZE
 80001ea:	2a1a      	cmp	r2, #26
    BLT process_string
 80001ec:	db02      	blt.n	80001f4 <process_string>
    SUB R2, #ALPHA_SIZE
 80001ee:	f1a2 021a 	sub.w	r2, r2, #26
    B normalize_shift
 80001f2:	e7fa      	b.n	80001ea <normalize_shift>

080001f4 <process_string>:

process_string:
    MOV R3, #0          @ Initialize offset to 0
 80001f4:	f04f 0300 	mov.w	r3, #0
    LDR R4, =string     @ Load address of string into R4
 80001f8:	4c15      	ldr	r4, [pc, #84]	@ (8000250 <end+0x6>)

080001fa <char_loop>:

char_loop:
    LDRB R0, [R4, R3]   @ Load byte at offset R3 into R0
 80001fa:	5ce0      	ldrb	r0, [r4, r3]
    CMP R0, #0
 80001fc:	2800      	cmp	r0, #0
    BEQ end             @ Exit if null terminator found
 80001fe:	d024      	beq.n	800024a <end>

    @ Check if uppercase letter
    CMP R0, #LC_LOWER
 8000200:	2841      	cmp	r0, #65	@ 0x41
    BLT next_char       @ Skip if below 'A'
 8000202:	db1f      	blt.n	8000244 <next_char>
    CMP R0, #LC_UPPER
 8000204:	285a      	cmp	r0, #90	@ 0x5a
    BLE shift_uppercase @ Branch if uppercase letter
 8000206:	dd04      	ble.n	8000212 <shift_uppercase>

    @ Check if lowercase letter
    CMP R0, #UC_LOWER
 8000208:	2861      	cmp	r0, #97	@ 0x61
    BLT next_char       @ Skip if between 'Z' and 'a'
 800020a:	db1b      	blt.n	8000244 <next_char>
    CMP R0, #UC_UPPER
 800020c:	287a      	cmp	r0, #122	@ 0x7a
    BLE shift_lowercase @ Branch if lowercase letter
 800020e:	dd05      	ble.n	800021c <shift_lowercase>
    B next_char         @ Skip if above 'z'
 8000210:	e018      	b.n	8000244 <next_char>

08000212 <shift_uppercase>:

shift_uppercase:
    MOV R5, #LC_LOWER   @ Set lower bound for uppercase
 8000212:	f04f 0541 	mov.w	r5, #65	@ 0x41
    MOV R6, #LC_UPPER   @ Set upper bound for uppercase
 8000216:	f04f 065a 	mov.w	r6, #90	@ 0x5a
    B perform_shift
 800021a:	e003      	b.n	8000224 <perform_shift>

0800021c <shift_lowercase>:

shift_lowercase:
    MOV R5, #UC_LOWER   @ Set lower bound for lowercase
 800021c:	f04f 0561 	mov.w	r5, #97	@ 0x61
    MOV R6, #UC_UPPER   @ Set upper bound for lowercase
 8000220:	f04f 067a 	mov.w	r6, #122	@ 0x7a

08000224 <perform_shift>:

perform_shift:
    MOV R7, R2          @ Copy shift amount to working register
 8000224:	4617      	mov	r7, r2
    CMP R1, #0
 8000226:	2900      	cmp	r1, #0
    BNE shift_backward  @ Branch based on direction flag
 8000228:	d105      	bne.n	8000236 <shift_backward>

0800022a <shift_forward>:

shift_forward:
    @ Shift character forward
    ADD R0, R0, R7      @ Apply shift
 800022a:	4438      	add	r0, r7
    CMP R0, R6          @ Check if past upper bound
 800022c:	42b0      	cmp	r0, r6
    BLE store_char      @ If not, store character
 800022e:	dd08      	ble.n	8000242 <store_char>
    SUB R0, R0, #ALPHA_SIZE  @ Wrap around
 8000230:	f1a0 001a 	sub.w	r0, r0, #26
    B store_char
 8000234:	e005      	b.n	8000242 <store_char>

08000236 <shift_backward>:

shift_backward:
    @ Shift character backward
    SUB R0, R0, R7      @ Apply negative shift
 8000236:	eba0 0007 	sub.w	r0, r0, r7
    CMP R0, R5          @ Check if below lower bound
 800023a:	42a8      	cmp	r0, r5
    BGE store_char      @ If not, store character
 800023c:	da01      	bge.n	8000242 <store_char>
    ADD R0, R0, #ALPHA_SIZE  @ Wrap around
 800023e:	f100 001a 	add.w	r0, r0, #26

08000242 <store_char>:

store_char:
    STRB R0, [R4, R3]   @ Store modified character back to string
 8000242:	54e0      	strb	r0, [r4, r3]

08000244 <next_char>:

next_char:
    ADD R3, R3, #1      @ Increment offset
 8000244:	f103 0301 	add.w	r3, r3, #1
    B char_loop         @ Continue with next character
 8000248:	e7d7      	b.n	80001fa <char_loop>

0800024a <end>:

end:
    MOV R0, #0          @ Return 0
 800024a:	f04f 0000 	mov.w	r0, #0
    BX LR               @ Return from main function
 800024e:	4770      	bx	lr
    LDR R4, =string     @ Load address of string into R4
 8000250:	20000000 	.word	0x20000000

08000254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000254:	480d      	ldr	r0, [pc, #52]	@ (800028c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000256:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000258:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800025c:	480c      	ldr	r0, [pc, #48]	@ (8000290 <LoopForever+0x6>)
  ldr r1, =_edata
 800025e:	490d      	ldr	r1, [pc, #52]	@ (8000294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000260:	4a0d      	ldr	r2, [pc, #52]	@ (8000298 <LoopForever+0xe>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0a      	ldr	r2, [pc, #40]	@ (800029c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000274:	4c0a      	ldr	r4, [pc, #40]	@ (80002a0 <LoopForever+0x16>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000282:	f000 f811 	bl	80002a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000286:	f7ff ffa5 	bl	80001d4 <main>

0800028a <LoopForever>:

LoopForever:
  b LoopForever
 800028a:	e7fe      	b.n	800028a <LoopForever>
  ldr   r0, =_estack
 800028c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000294:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000298:	08000310 	.word	0x08000310
  ldr r2, =_sbss
 800029c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002a0:	20000020 	.word	0x20000020

080002a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a4:	e7fe      	b.n	80002a4 <ADC1_2_IRQHandler>
	...

080002a8 <__libc_init_array>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	4d0d      	ldr	r5, [pc, #52]	@ (80002e0 <__libc_init_array+0x38>)
 80002ac:	4c0d      	ldr	r4, [pc, #52]	@ (80002e4 <__libc_init_array+0x3c>)
 80002ae:	1b64      	subs	r4, r4, r5
 80002b0:	10a4      	asrs	r4, r4, #2
 80002b2:	2600      	movs	r6, #0
 80002b4:	42a6      	cmp	r6, r4
 80002b6:	d109      	bne.n	80002cc <__libc_init_array+0x24>
 80002b8:	4d0b      	ldr	r5, [pc, #44]	@ (80002e8 <__libc_init_array+0x40>)
 80002ba:	4c0c      	ldr	r4, [pc, #48]	@ (80002ec <__libc_init_array+0x44>)
 80002bc:	f000 f818 	bl	80002f0 <_init>
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	10a4      	asrs	r4, r4, #2
 80002c4:	2600      	movs	r6, #0
 80002c6:	42a6      	cmp	r6, r4
 80002c8:	d105      	bne.n	80002d6 <__libc_init_array+0x2e>
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d0:	4798      	blx	r3
 80002d2:	3601      	adds	r6, #1
 80002d4:	e7ee      	b.n	80002b4 <__libc_init_array+0xc>
 80002d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002da:	4798      	blx	r3
 80002dc:	3601      	adds	r6, #1
 80002de:	e7f2      	b.n	80002c6 <__libc_init_array+0x1e>
 80002e0:	08000308 	.word	0x08000308
 80002e4:	08000308 	.word	0x08000308
 80002e8:	08000308 	.word	0x08000308
 80002ec:	0800030c 	.word	0x0800030c

080002f0 <_init>:
 80002f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f2:	bf00      	nop
 80002f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f6:	bc08      	pop	{r3}
 80002f8:	469e      	mov	lr, r3
 80002fa:	4770      	bx	lr

080002fc <_fini>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr


test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000194  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000328  08000330  00001330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000328  08000328  00001330  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000328  08000328  00001330  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000328  08000330  00001330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000328  08000328  00001328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800032c  0800032c  0000132c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001330  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000010c  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000007f  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  000014eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00001578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000090  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  0000166c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000310 	.word	0x08000310

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000310 	.word	0x08000310

080001d4 <enable_timer2_clock>:
.text
@ define code

enable_timer2_clock:

	LDR R0, =RCC	@ load the base address for the timer
 80001d4:	4825      	ldr	r0, [pc, #148]	@ (800026c <wait_for_update+0x1c>)
	LDR R1, [R0, APB1ENR] 	@ load the peripheral clock control register
 80001d6:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << TIM2EN @ store a 1 in bit for the TIM2 enable flag
 80001d8:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, APB1ENR] @ enable the timer
 80001dc:	61c1      	str	r1, [r0, #28]
	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <enable_peripheral_clocks>:


@ function to enable the clocks for the peripherals we are using (A, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001e0:	4822      	ldr	r0, [pc, #136]	@ (800026c <wait_for_update+0x1c>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001e2:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << 21 | 1 << 19 | 1 << 17  @ 21st bit is enable GPIOE clock, 19 is GPIOC, 17 is GPIOA clock
 80001e4:	f441 1128 	orr.w	r1, r1, #2752512	@ 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001e8:	6141      	str	r1, [r0, #20]
	BX LR @ return
 80001ea:	4770      	bx	lr

080001ec <initialise_discovery_board>:


@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001ec:	4820      	ldr	r0, [pc, #128]	@ (8000270 <wait_for_update+0x20>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001ee:	f245 5155 	movw	r1, #21845	@ 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001f2:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001f4:	4770      	bx	lr

080001f6 <configure_timer>:

@ Function to configure hardware timer with preload register for accurate delay
configure_timer:
    LDR R0, =TIM2
 80001f6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    MOV R1, #159           @ Set prescaler for 0.1ms delay
 80001fa:	f04f 019f 	mov.w	r1, #159	@ 0x9f
    STR R1, [R0, TIM_PSC]
 80001fe:	6281      	str	r1, [r0, #40]	@ 0x28

    MOV R1, #100           @ Set auto-reload value for 0.1ms period
 8000200:	f04f 0164 	mov.w	r1, #100	@ 0x64
    STR R1, [R0, TIM_ARR]  @ Store in auto-reload register
 8000204:	62c1      	str	r1, [r0, #44]	@ 0x2c

    MOV R1, #0b10000001    @ Enable ARPE (Auto-reload preload enable) and start counter
 8000206:	f04f 0181 	mov.w	r1, #129	@ 0x81
    STR R1, [R0, TIM_CR1]
 800020a:	6001      	str	r1, [r0, #0]

    BX LR                   @ Return
 800020c:	4770      	bx	lr

0800020e <trigger_prescaler>:

	@ In your code, you should be using the ARR register to
	@ set the maximum count for the timer

	@ store a value for the prescaler
	LDR R0, =TIM2	@ load the base address for the timer
 800020e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000

	LDR R1, =0x1 @ make the timer overflow after counting to only 1
 8000212:	f04f 0101 	mov.w	r1, #1
	STR R1, [R0, TIM_ARR] @ set the ARR register
 8000216:	62c1      	str	r1, [r0, #44]	@ 0x2c

	LDR R8, =0x00
 8000218:	f04f 0800 	mov.w	r8, #0
	STR R8, [R0, TIM_CNT] @ reset the clock
 800021c:	f8c0 8024 	str.w	r8, [r0, #36]	@ 0x24
	NOP
 8000220:	bf00      	nop
	NOP
 8000222:	bf00      	nop

	LDR R1, =0xffffffff @ set the ARR back to the default value
 8000224:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
	STR R1, [R0, TIM_ARR] @ set the ARR register
 8000228:	62c1      	str	r1, [r0, #44]	@ 0x2c

	BX LR
 800022a:	4770      	bx	lr

0800022c <main>:
.global main

.text

main:
    BL enable_timer2_clock
 800022c:	f7ff ffd2 	bl	80001d4 <enable_timer2_clock>
    BL enable_peripheral_clocks
 8000230:	f7ff ffd6 	bl	80001e0 <enable_peripheral_clocks>
    BL initialise_discovery_board
 8000234:	f7ff ffda 	bl	80001ec <initialise_discovery_board>
    BL configure_timer
 8000238:	f7ff ffdd 	bl	80001f6 <configure_timer>

    LDR R0, =TIM2
 800023c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    MOV R1, #0b1           @ Enable timer
 8000240:	f04f 0101 	mov.w	r1, #1
    STR R1, [R0, TIM_CR1]
 8000244:	6001      	str	r1, [r0, #0]

    MOV R4, #10000         @ Number of 0.1ms periods in 1 second
 8000246:	f242 7410 	movw	r4, #10000	@ 0x2710

    LDR R5, =GPIOE         @ Load GPIOE base address
 800024a:	4d09      	ldr	r5, [pc, #36]	@ (8000270 <wait_for_update+0x20>)

0800024c <count_loop>:
count_loop:
    LDR R0, =TIM2
 800024c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000

08000250 <wait_for_update>:
wait_for_update:
    LDR R1, [R0, TIM_SR]   @ Check status register
 8000250:	6901      	ldr	r1, [r0, #16]
    TST R1, #0x01          @ Check if update event occurred
 8000252:	f011 0f01 	tst.w	r1, #1
    BEQ wait_for_update    @ Wait for timer to overflow
 8000256:	d0fb      	beq.n	8000250 <wait_for_update>

    STR R1, [R0, TIM_SR]   @ Clear update event flag
 8000258:	6101      	str	r1, [r0, #16]

    SUBS R4, R4, #1        @ Decrement counter
 800025a:	3c01      	subs	r4, #1
    BNE count_loop         @ Repeat until 1 second is reached
 800025c:	d1f6      	bne.n	800024c <count_loop>

    @ Toggle LED every 1 second
    LDR R6, [R5, ODR]      @ Load current LED state
 800025e:	696e      	ldr	r6, [r5, #20]
    EOR R6, R6, #0x0100   @ Toggle bit 8 (Assuming LED is on PE8)
 8000260:	f486 7680 	eor.w	r6, r6, #256	@ 0x100
    STR R6, [R5, ODR]      @ Store updated LED state
 8000264:	616e      	str	r6, [r5, #20]

    MOV R4, #10000         @ Reset counter for next 1 second interval
 8000266:	f242 7410 	movw	r4, #10000	@ 0x2710
    B count_loop           @ Continue blinking indefinitely
 800026a:	e7ef      	b.n	800024c <count_loop>
	LDR R0, =RCC	@ load the base address for the timer
 800026c:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000270:	48001000 	.word	0x48001000

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	@ (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000278:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480c      	ldr	r0, [pc, #48]	@ (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027e:	490d      	ldr	r1, [pc, #52]	@ (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000280:	4a0d      	ldr	r2, [pc, #52]	@ (80002b8 <LoopForever+0xe>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	@ (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000294:	4c0a      	ldr	r4, [pc, #40]	@ (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 f811 	bl	80002c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ffc1 	bl	800022c <main>

080002aa <LoopForever>:

LoopForever:
  b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000330 	.word	0x08000330
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	2000001c 	.word	0x2000001c

080002c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC1_2_IRQHandler>
	...

080002c8 <__libc_init_array>:
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	4d0d      	ldr	r5, [pc, #52]	@ (8000300 <__libc_init_array+0x38>)
 80002cc:	4c0d      	ldr	r4, [pc, #52]	@ (8000304 <__libc_init_array+0x3c>)
 80002ce:	1b64      	subs	r4, r4, r5
 80002d0:	10a4      	asrs	r4, r4, #2
 80002d2:	2600      	movs	r6, #0
 80002d4:	42a6      	cmp	r6, r4
 80002d6:	d109      	bne.n	80002ec <__libc_init_array+0x24>
 80002d8:	4d0b      	ldr	r5, [pc, #44]	@ (8000308 <__libc_init_array+0x40>)
 80002da:	4c0c      	ldr	r4, [pc, #48]	@ (800030c <__libc_init_array+0x44>)
 80002dc:	f000 f818 	bl	8000310 <_init>
 80002e0:	1b64      	subs	r4, r4, r5
 80002e2:	10a4      	asrs	r4, r4, #2
 80002e4:	2600      	movs	r6, #0
 80002e6:	42a6      	cmp	r6, r4
 80002e8:	d105      	bne.n	80002f6 <__libc_init_array+0x2e>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f0:	4798      	blx	r3
 80002f2:	3601      	adds	r6, #1
 80002f4:	e7ee      	b.n	80002d4 <__libc_init_array+0xc>
 80002f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fa:	4798      	blx	r3
 80002fc:	3601      	adds	r6, #1
 80002fe:	e7f2      	b.n	80002e6 <__libc_init_array+0x1e>
 8000300:	08000328 	.word	0x08000328
 8000304:	08000328 	.word	0x08000328
 8000308:	08000328 	.word	0x08000328
 800030c:	0800032c 	.word	0x0800032c

08000310 <_init>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr

0800031c <_fini>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	bf00      	nop
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr

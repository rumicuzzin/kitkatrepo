
Week1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000190  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000324  0800032c  0000132c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000324  08000324  0000132c  2**0
                  CONTENTS
  4 .ARM          00000000  08000324  08000324  0000132c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000324  0800032c  0000132c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000324  08000324  00001324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000328  08000328  00001328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000132c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000132c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000010a  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000051  00000000  00000000  00001466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  000014b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00001548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000062  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800030c 	.word	0x0800030c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800030c 	.word	0x0800030c

080001d4 <enable_peripheral_clocks>:
#include "definitions.s"


@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4824      	ldr	r0, [pc, #144]	@ (8000268 <stable_state_turnoff+0xa>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f441 1128 	orr.w	r1, r1, #2752512	@ 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return from function call
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:



@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e0:	4822      	ldr	r0, [pc, #136]	@ (800026c <stable_state_turnoff+0xe>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	@ 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <main>:
@define variables

.text

main:
    BL enable_peripheral_clocks			@ Branch with link to set the clocks for the I/O and UART
 80001ea:	f7ff fff3 	bl	80001d4 <enable_peripheral_clocks>
    BL initialise_discovery_board
 80001ee:	f7ff fff7 	bl	80001e0 <initialise_discovery_board>

    LDR R2, =GPIOE						@ Load the base address of GPIOE into R5
 80001f2:	4a1e      	ldr	r2, [pc, #120]	@ (800026c <stable_state_turnoff+0xe>)
    LDR R4, =0b00000000					@ Store initial pattern for LEDs into R4
 80001f4:	f04f 0400 	mov.w	r4, #0

    LDR R1, =GPIOA						@ Load the base address of GPIOA into R1
 80001f8:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
    STRB R4, [R2, #ODR +1]				@ Display initial pattern
 80001fc:	7554      	strb	r4, [r2, #21]

080001fe <loop>:

loop:
    LDR R0, [R1, #IDR]					@ Load the input data register (IDR) of GPIOA into R0
 80001fe:	6908      	ldr	r0, [r1, #16]
    TST R0, #1 << BUTTON_PIN			@ Test the specific bit for the button pin
 8000200:	f010 0f01 	tst.w	r0, #1

    BEQ loop						@ Branch if the button is not pressed
 8000204:	d0fb      	beq.n	80001fe <loop>

    BL debounce_button					@ Branch to debounce function
 8000206:	f000 f814 	bl	8000232 <debounce_button>

0800020a <loop_return>:

loop_return:
    LSL R4, #1							@ Left shift the values in R4
 800020a:	ea4f 0444 	mov.w	r4, r4, lsl #1
    ORR R4, R4, 0b00000001				@ Set the next bit to 1 @For (B) use ORR
 800020e:	f044 0401 	orr.w	r4, r4, #1
    STRB R4, [R2, #ODR +1]				@ Store value of the pattern into the output register
 8000212:	7554      	strb	r4, [r2, #21]
    CMP R4, 0b11111111
 8000214:	2cff      	cmp	r4, #255	@ 0xff
    BEQ loop_turnoff
 8000216:	d000      	beq.n	800021a <loop_turnoff>
    B loop
 8000218:	e7f1      	b.n	80001fe <loop>

0800021a <loop_turnoff>:

loop_turnoff:
	LDR R0, [R1, #IDR]
 800021a:	6908      	ldr	r0, [r1, #16]
	TST R0, #1 << BUTTON_PIN
 800021c:	f010 0f01 	tst.w	r0, #1

	BEQ loop_turnoff
 8000220:	d0fb      	beq.n	800021a <loop_turnoff>
	BL debounce_button_turnoff
 8000222:	f000 f80f 	bl	8000244 <debounce_button_turnoff>

08000226 <loop_return_turnoff>:

loop_return_turnoff:
    LSR R4, #1							@ Left shift the values in R4
 8000226:	ea4f 0454 	mov.w	r4, r4, lsr #1
    AND R4, R4, 0b01111111
 800022a:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
    STRB R4, [R2, #ODR +1]				@ Store value of the pattern into the output register
 800022e:	7554      	strb	r4, [r2, #21]
    B loop_turnoff
 8000230:	e7f3      	b.n	800021a <loop_turnoff>

08000232 <debounce_button>:

debounce_button:
    MOV R5, #0         					@ Counter for stable state
 8000232:	f04f 0500 	mov.w	r5, #0
    MOV R6, #10        					@ Debounce threshold
 8000236:	f04f 060a 	mov.w	r6, #10

0800023a <debounce_loop>:

debounce_loop:
    LDR R0, [R1, #IDR]
 800023a:	6908      	ldr	r0, [r1, #16]
    TST R0, #1 << BUTTON_PIN
 800023c:	f010 0f01 	tst.w	r0, #1

    BEQ stable_state
 8000240:	d009      	beq.n	8000256 <stable_state>
    B debounce_loop
 8000242:	e7fa      	b.n	800023a <debounce_loop>

08000244 <debounce_button_turnoff>:

debounce_button_turnoff:
	MOV R5, #0         					@ Counter for stable state
 8000244:	f04f 0500 	mov.w	r5, #0
    MOV R6, #10        					@ Debounce threshold
 8000248:	f04f 060a 	mov.w	r6, #10

0800024c <debounce_loop_turnoff>:

debounce_loop_turnoff:
    LDR R0, [R1, #IDR]
 800024c:	6908      	ldr	r0, [r1, #16]
    TST R0, #1 << BUTTON_PIN
 800024e:	f010 0f01 	tst.w	r0, #1

    BEQ stable_state_turnoff
 8000252:	d004      	beq.n	800025e <stable_state_turnoff>
    B debounce_loop_turnoff
 8000254:	e7fa      	b.n	800024c <debounce_loop_turnoff>

08000256 <stable_state>:

stable_state:
    ADDS R5, #1
 8000256:	3501      	adds	r5, #1
    CMP R5, R6
 8000258:	42b5      	cmp	r5, r6
    BLT debounce_loop  					@ Continue debounce if not stable for required cycles
 800025a:	dbee      	blt.n	800023a <debounce_loop>

    B loop_return      					@ Return when stable
 800025c:	e7d5      	b.n	800020a <loop_return>

0800025e <stable_state_turnoff>:

stable_state_turnoff:
	ADDS R5, #1
 800025e:	3501      	adds	r5, #1
    CMP R5, R6
 8000260:	42b5      	cmp	r5, r6
    BLT debounce_loop_turnoff  					@ Continue debounce if not stable for required cycles
 8000262:	dbf3      	blt.n	800024c <debounce_loop_turnoff>

    B loop_return_turnoff      					@ Return when stable
 8000264:	e7df      	b.n	8000226 <loop_return_turnoff>
 8000266:	0000      	.short	0x0000
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 8000268:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 800026c:	48001000 	.word	0x48001000

08000270 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000270:	480d      	ldr	r0, [pc, #52]	@ (80002a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000272:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000274:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000278:	480c      	ldr	r0, [pc, #48]	@ (80002ac <LoopForever+0x6>)
  ldr r1, =_edata
 800027a:	490d      	ldr	r1, [pc, #52]	@ (80002b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800027c:	4a0d      	ldr	r2, [pc, #52]	@ (80002b4 <LoopForever+0xe>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000280:	e002      	b.n	8000288 <LoopCopyDataInit>

08000282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000286:	3304      	adds	r3, #4

08000288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800028c:	d3f9      	bcc.n	8000282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028e:	4a0a      	ldr	r2, [pc, #40]	@ (80002b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000290:	4c0a      	ldr	r4, [pc, #40]	@ (80002bc <LoopForever+0x16>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000294:	e001      	b.n	800029a <LoopFillZerobss>

08000296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000298:	3204      	adds	r2, #4

0800029a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800029c:	d3fb      	bcc.n	8000296 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029e:	f000 f811 	bl	80002c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a2:	f7ff ffa2 	bl	80001ea <main>

080002a6 <LoopForever>:

LoopForever:
  b LoopForever
 80002a6:	e7fe      	b.n	80002a6 <LoopForever>
  ldr   r0, =_estack
 80002a8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b4:	0800032c 	.word	0x0800032c
  ldr r2, =_sbss
 80002b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002bc:	2000001c 	.word	0x2000001c

080002c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <ADC1_2_IRQHandler>
	...

080002c4 <__libc_init_array>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	4d0d      	ldr	r5, [pc, #52]	@ (80002fc <__libc_init_array+0x38>)
 80002c8:	4c0d      	ldr	r4, [pc, #52]	@ (8000300 <__libc_init_array+0x3c>)
 80002ca:	1b64      	subs	r4, r4, r5
 80002cc:	10a4      	asrs	r4, r4, #2
 80002ce:	2600      	movs	r6, #0
 80002d0:	42a6      	cmp	r6, r4
 80002d2:	d109      	bne.n	80002e8 <__libc_init_array+0x24>
 80002d4:	4d0b      	ldr	r5, [pc, #44]	@ (8000304 <__libc_init_array+0x40>)
 80002d6:	4c0c      	ldr	r4, [pc, #48]	@ (8000308 <__libc_init_array+0x44>)
 80002d8:	f000 f818 	bl	800030c <_init>
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	10a4      	asrs	r4, r4, #2
 80002e0:	2600      	movs	r6, #0
 80002e2:	42a6      	cmp	r6, r4
 80002e4:	d105      	bne.n	80002f2 <__libc_init_array+0x2e>
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ec:	4798      	blx	r3
 80002ee:	3601      	adds	r6, #1
 80002f0:	e7ee      	b.n	80002d0 <__libc_init_array+0xc>
 80002f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f6:	4798      	blx	r3
 80002f8:	3601      	adds	r6, #1
 80002fa:	e7f2      	b.n	80002e2 <__libc_init_array+0x1e>
 80002fc:	08000324 	.word	0x08000324
 8000300:	08000324 	.word	0x08000324
 8000304:	08000324 	.word	0x08000324
 8000308:	08000328 	.word	0x08000328

0800030c <_init>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	bf00      	nop
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr

08000318 <_fini>:
 8000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031a:	bf00      	nop
 800031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031e:	bc08      	pop	{r3}
 8000320:	469e      	mov	lr, r3
 8000322:	4770      	bx	lr

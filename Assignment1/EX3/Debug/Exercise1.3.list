
Exercise1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000010c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002a0  080002a0  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002a0  080002a0  00002010  2**0
                  CONTENTS
  4 .ARM          00000000  080002a0  080002a0  00002010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002a0  080002a0  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002a0  080002a0  000012a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002a4  080002a4  000012a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080002a8  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002010  2**0
                  CONTENTS
 10 .bss          0000001c  20000010  20000010  00002010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00002010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 13 .debug_line   000000cd  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000088  00000000  00000000  0000210d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000054  00000000  00000000  00002195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000021e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000000a4  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000288 	.word	0x08000288

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08000288 	.word	0x08000288

080001d4 <main>:
@ start of the code section

@ this is the entry function called from the startup file
main:

	LDR R0, =byte_array_1 @ Loads the memory address of byte_array_1 and word_array_1 into register R0.
 80001d4:	4803      	ldr	r0, [pc, #12]	@ (80001e4 <forever_loop+0x4>)
	LDR R0, =word_array_1 @ Loads the memory address of word_array_1 into register R0.
 80001d6:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <forever_loop+0x8>)
 	@ Load the address of byte_array_1 first, then overwrite it with word_array_1.

	LDR R0, =0x1234
 80001d8:	f241 2034 	movw	r0, #4660	@ 0x1234
	LDR R1, =0x0001
 80001dc:	f04f 0101 	mov.w	r1, #1

080001e0 <forever_loop>:
 	@Loads immediate values into registers

forever_loop :

	ADD R0 , R1 @ adds R1 to R0 (R0 = R0 + R1)
 80001e0:	4408      	add	r0, r1
	B forever_loop @ unconditional branch back to forever_loop.
 80001e2:	e7fd      	b.n	80001e0 <forever_loop>
	LDR R0, =byte_array_1 @ Loads the memory address of byte_array_1 and word_array_1 into register R0.
 80001e4:	20000000 	.word	0x20000000
	LDR R0, =word_array_1 @ Loads the memory address of word_array_1 into register R0.
 80001e8:	2000000c 	.word	0x2000000c

080001ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001ec:	480d      	ldr	r0, [pc, #52]	@ (8000224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f4:	480c      	ldr	r0, [pc, #48]	@ (8000228 <LoopForever+0x6>)
  ldr r1, =_edata
 80001f6:	490d      	ldr	r1, [pc, #52]	@ (800022c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000230 <LoopForever+0xe>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001fc:	e002      	b.n	8000204 <LoopCopyDataInit>

080001fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000202:	3304      	adds	r3, #4

08000204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000208:	d3f9      	bcc.n	80001fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800020a:	4a0a      	ldr	r2, [pc, #40]	@ (8000234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800020c:	4c0a      	ldr	r4, [pc, #40]	@ (8000238 <LoopForever+0x16>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000210:	e001      	b.n	8000216 <LoopFillZerobss>

08000212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000214:	3204      	adds	r2, #4

08000216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000218:	d3fb      	bcc.n	8000212 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800021a:	f000 f811 	bl	8000240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021e:	f7ff ffd9 	bl	80001d4 <main>

08000222 <LoopForever>:

LoopForever:
  b LoopForever
 8000222:	e7fe      	b.n	8000222 <LoopForever>
  ldr   r0, =_estack
 8000224:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800022c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000230:	080002a8 	.word	0x080002a8
  ldr r2, =_sbss
 8000234:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000238:	2000002c 	.word	0x2000002c

0800023c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800023c:	e7fe      	b.n	800023c <ADC1_2_IRQHandler>
	...

08000240 <__libc_init_array>:
 8000240:	b570      	push	{r4, r5, r6, lr}
 8000242:	4d0d      	ldr	r5, [pc, #52]	@ (8000278 <__libc_init_array+0x38>)
 8000244:	4c0d      	ldr	r4, [pc, #52]	@ (800027c <__libc_init_array+0x3c>)
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	10a4      	asrs	r4, r4, #2
 800024a:	2600      	movs	r6, #0
 800024c:	42a6      	cmp	r6, r4
 800024e:	d109      	bne.n	8000264 <__libc_init_array+0x24>
 8000250:	4d0b      	ldr	r5, [pc, #44]	@ (8000280 <__libc_init_array+0x40>)
 8000252:	4c0c      	ldr	r4, [pc, #48]	@ (8000284 <__libc_init_array+0x44>)
 8000254:	f000 f818 	bl	8000288 <_init>
 8000258:	1b64      	subs	r4, r4, r5
 800025a:	10a4      	asrs	r4, r4, #2
 800025c:	2600      	movs	r6, #0
 800025e:	42a6      	cmp	r6, r4
 8000260:	d105      	bne.n	800026e <__libc_init_array+0x2e>
 8000262:	bd70      	pop	{r4, r5, r6, pc}
 8000264:	f855 3b04 	ldr.w	r3, [r5], #4
 8000268:	4798      	blx	r3
 800026a:	3601      	adds	r6, #1
 800026c:	e7ee      	b.n	800024c <__libc_init_array+0xc>
 800026e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000272:	4798      	blx	r3
 8000274:	3601      	adds	r6, #1
 8000276:	e7f2      	b.n	800025e <__libc_init_array+0x1e>
 8000278:	080002a0 	.word	0x080002a0
 800027c:	080002a0 	.word	0x080002a0
 8000280:	080002a0 	.word	0x080002a0
 8000284:	080002a4 	.word	0x080002a4

08000288 <_init>:
 8000288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800028a:	bf00      	nop
 800028c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800028e:	bc08      	pop	{r3}
 8000290:	469e      	mov	lr, r3
 8000292:	4770      	bx	lr

08000294 <_fini>:
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	bf00      	nop
 8000298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800029a:	bc08      	pop	{r3}
 800029c:	469e      	mov	lr, r3
 800029e:	4770      	bx	lr
